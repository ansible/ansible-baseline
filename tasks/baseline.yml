- name: Gather Facts
  setup:

- vars:
    file_list:
      - 64k.bin
      - 128k.bin
      - 256k.bin
      - 512k.bin
      - 1024k.bin
  block:
    - name: Create target_tmpdir for later use
      tempfile:
        state: directory
      register: target_tempfile_result

    - name: Set target_tmpdir fact
      set_fact:
        target_tmpdir: "{{ target_tempfile_result.path }}"

    - name: Createlocal_tmpdir for later use
      tempfile:
        state: directory
      register: local_tempfile_result
      delegate_to: localhost
      run_once: true
      vars:
        ansible_connection: local

    - name: Set local_tmpdir fact
      set_fact:
        local_tmpdir: "{{ local_tempfile_result.path }}"
      run_once: true

    - ping:

    - raw: whoami
      changed_when: false

    - shell: whoami
      changed_when: false

    - name: Copy a sequence of files that are larger in each iteration
      copy:
        src: "{{ item }}"
        dest: "{{ target_tmpdir }}/{{ item }}"
      with_list: "{{ file_list }}"

    - name: Change permissions on the sequence of files
      file:
        path: "{{ target_tmpdir }}/{{ item }}"
        mode: "0400"
      with_list: "{{ file_list }}"

    - name: Stat all of the files
      stat:
        path: "{{ target_tmpdir }}/{{ item }}"
      with_list: "{{ file_list }}"
      register: bin_stats

    - name: Raw stat all of the files
      raw: "stat {{ target_tmpdir }}/{{ item }}"
      changed_when: false
      with_list: "{{ file_list }}"
      register: raw_bin_stats

    - name: Raw python stat all of the files
      raw: |
        {{ ansible_python_interpreter|default(ansible_facts.discovered_interpreter_python|default('/usr/bin/python')) }} -c 'import os, json; s = os.stat("{{ target_tmpdir }}/{{ item }}"); print(json.dumps(dict((a[3:], getattr(s, a)) for a in dir(s) if a[:3] == "st_")))'
      changed_when: false
      with_list: "{{ file_list }}"
      register: raw_python_bin_stats

    - name: Debug raw_python_bin_stats
      debug:
        msg: "{{ item.stdout_lines|last|from_json }}"
        verbosity: 1
      with_list: "{{ raw_python_bin_stats.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Fetch copied files
      fetch:
        src: "{{ target_tmpdir }}/{{ item }}"
        dest: "{{ local_tmpdir }}"
      with_list: "{{ file_list }}"

    - name: Slurp copied files
      slurp:
        src: "{{ target_tmpdir }}/{{ item }}"
      with_list: "{{ file_list }}"

    - name: Template out a file using hostvars
      template:
        src: template.j2
        dest: "{{ target_tmpdir }}/template.out"

  always:
    - name: Remove target_tmpdir
      file:
        path: "{{ target_tmpdir }}"
        state: absent

    - name: Remove local_tmpdir
      file:
        path: "{{ local_tmpdir }}"
        state: absent
      delegate_to: localhost
      run_once: true
      vars:
        ansible_connection: local
